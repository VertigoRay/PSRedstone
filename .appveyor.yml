image: WMF 5

# Skip on updates to the readme.
# We can force this by adding [skip ci] or [ci skip] anywhere in commit message
skip_commits:
  message: /update(?:|d|s) readme\..*/

environment:
  GITHUB_PERSONAL_ACCESS_TOKEN:
    secure: 9dAiRDP1/4/NmX8+4Rq1Xf22yjI5ZTuGtPpuP9keq0mfk9yRd+urPf0FsYx1rre2

init:
  - ps: |
      if ($env:APPVEYOR_REPO_TAG -eq 'true') {
        $env:MODULE_VERSION = ((Get-Date -Format 'yyyy.MM.dd'), ((New-TimeSpan -Start ([datetime]::Today)).TotalSeconds -as [int])) -join '.'
        Update-AppveyorBuild -Version ${env:MODULE_VERSION}
        $details = [ordered] @{
          APPVEYOR_REPO_TAG = $env:APPVEYOR_REPO_TAG
          APPVEYOR_REPO_TAG_NAME = $env:APPVEYOR_REPO_TAG_NAME
          MODULE_VERSION = $env:MODULE_VERSION
        }
        Add-AppveyorMessage -Message ('Git tag to publish Version: {0}' -f $env:MODULE_VERSION) -Category 'Information' -Details ($details | ConvertTo-Json)
      } else {
        Add-AppveyorMessage -Message 'Git Push, just running checks.' -Category 'Information'
      }

install:
  # Bootstrap PSDepend and Install Dependencies
  - ps: |
      $InformationPreference = 'Continue'
      & ([IO.Path]::Combine($env:APPVEYOR_BUILD_FOLDER, '.build', 'buildPrep.ps1'))
    on:
      branch: master                 # release from master branch only

# before_build:
#   # Run Pester Tests
#   - ps: |
#       $invokePsake = @{
#         BuildFile = [IO.Path]::Combine($env:APPVEYOR_BUILD_FOLDER, '.build', 'buildPsake.ps1')
#         TaskList = 'Test'
#       }
#       Invoke-psake @invokePsake
#       if (-not $psake.build_success) {
#         $Host.SetShouldExit(1)
#       }
#     on:
#       branch: master                 # release from master branch only

build_script:
  - ps: |
      $invokePsake = @{
        BuildFile = [IO.Path]::Combine($env:APPVEYOR_BUILD_FOLDER, '.build', 'buildPsake.ps1')
        # TaskList = 'default'
      }
      Invoke-psake @invokePsake
      if (-not $psake.build_success) {
        $Host.SetShouldExit(1)
      }
    on:
      branch: master                 # release from master branch only

# test_script:
#   # Run Pester Tests w/ CodeCov
#   - ps: |
#       $invokePsake = @{
#         BuildFile = [IO.Path]::Combine($env:APPVEYOR_BUILD_FOLDER, '.build', 'buildPsake.ps1')
#         TaskList = 'Test'
#         Parameters = @{
#           Pester = @{
#             Configuration = @{
#               Run = @{
#                 Path = [IO.Path]::Combine($env:APPVEYOR_BUILD_FOLDER, 'Tests')
#                 PassThru = $true
#                 Exit = if ($env:CI) { $true } else { $false }
#               }
#               CodeCoverage = @{
#                 Enabled = $true
#                 # Path = [IO.Path]::Combine($env:APPVEYOR_BUILD_FOLDER, 'dev', 'BuildOutput', 'PSRedstone', 'PSRedstone.psm1')
#                 Path = [IO.Path]::Combine($env:APPVEYOR_BUILD_FOLDER, 'PSRedstone', '*', '*.ps1')
#               }
#             }
#           }
#           CodeCoveragePath = [IO.Path]::Combine($env:APPVEYOR_BUILD_FOLDER, 'dev', 'coverage.json')
#         }
#       }
#       Invoke-psake @invokePsake
#       if (-not $psake.build_success) {
#         $Host.SetShouldExit(1)
#       }
#     on:
#       branch: master                 # release from master branch only

after_test:
  # Upload coverage report to codecov
  # Also, if we're tagged, delete the tag to prep for publishing release.
  - ps: |
      $invokePsake = @{
        BuildFile = [IO.Path]::Combine($env:APPVEYOR_BUILD_FOLDER, '.build', 'buildPsake.ps1')
        TaskList = @('CodeCov', 'GitHubTagDelete')
      }
      Invoke-psake @invokePsake
      if (-not $psake.build_success) {
        $Host.SetShouldExit(1)
      }
    on:
      branch: master                 # release from master branch only

deploy:
  # Deploy to GitHub Releases
  - release: $(APPVEYOR_BUILD_VERSION)
    provider: GitHub
    auth_token:
      secure: pRa0vZhRPzeDLMP30BEiTTMRjyCoOoiltxJWA07rI1NBFJHyG0ZmSp41roNT5bSh
    artifact: dev\PSRedstone.zip
    draft: false
    prerelease: false
    on:
      APPVEYOR_REPO_TAG: true

on_success:
  # If build was started by pushed tag; deploy it.
  - ps: |
      if ($env:APPVEYOR_REPO_TAG -eq 'true') {
        $invokePsake = @{
          BuildFile = [IO.Path]::Combine($env:APPVEYOR_BUILD_FOLDER, '.build', 'buildPsake.ps1')
          TaskList = @('DeployPSGallery', 'AppveyorArtifact')
        }
        Invoke-psake @invokePsake
        if (-not $psake.build_success) {
          $Host.SetShouldExit(1)
        }
      }
